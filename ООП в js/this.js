/** Способ 1 как код объекта*/
const user = {
    name: 'Ivan',
    getName: function (){
        console.log(this)
    }
}

user.getName()

// call, apply, bind
/** Эти методы созданы для вызова метода в другом объекте*/

user.getName.call({surname: 'Ivanov'})



/** Способ 2 как обычная функция, объявленная через function */
function func(){
    console.log(this)
}
window.func()

/** Как функция конструктор */
const ex = new func();



/** 'use strict' не позваляет глобальные перемнные и ещё некоторые вещи*/

/** This называют контекстом. This является объектом, который ссылается на саму функцию.
 * То есть, таким образом, мы записываем в функцию свойства, которые затем можно передать новому,
 * созданному через new, экземпляру.

 Ключевое слово this указывает на текущий контекст вызова функции. Контекст есть только у функций (в том числе, методов объекта, функций–конструкторов).
 Контекст нужен для доступа к информации внутри объекта. Если внутри функции есть обращение к this — ожидается, что функция вызвана в контексте какого–то объекта.
 Контекст не статичен — он определяется в момент выполнения функции. Его называют динамическим.
 Ключевое слово this во время вызова функции хранит ссылку на объект, для которого эта функция была вызвана в качестве метода. Так можно получить доступ к другим свойствам этого объекта.
 В случае, когда функция вызывается сама по себе, а не как метод объекта, тогда есть два варианта поведения:
 ключевое слово this будет ссылаться на глобальный объект window;
 если используется строгий режим ('use strict') — this будет иметь значение undefined.
 ВАЖНО! Стрелочные функции не содержат собственный контекст this, а используют значение this окружающего контекста. Поэтому стрелочные функции не могут быть функцией-конструктором. */