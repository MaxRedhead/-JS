/** Функция handler метода addEventListener может принимать как аргумент некий event, который называют объектом события.
 В некоторых источниках функция handler может называться listener.
 */

/** Его не нужно создавать самостоятельно — когда происходит событие, браузер создает этот объект события и записывает
 * в него детали и передает в обработчик как аргумент. Его принято называть event или просто e. */

/**
 event.type — имя события (“click”);
 event.currentTarget — элемент, на котором обрабатывается событие (для которого событие задано);
 event.target — элемент-триггер, запустивший событие.
 */


// Другие свойства объекта event:
/** eventPhase — число, показывающее на каком этапе произошло событие
 (1 - этапе погружения (перехвата), 2 - на цели, 3 - на этапе всплытия);

 timestamp — число (дата), когда произошло событие;

 bubbles — возвращает логическое значение, указывающее может ли данное событие всплывать;

 defaultPrevented — проверяет, можно ли вызвать метод preventDefault() для данного события;

 view — возвращает ссылку на объект window, в котором произошло событие. */


/** Второй аргумент для addEventListener — колбэк, который вызовется, когда событие произойдет. */


/** И третий аргумент — это объект или булево значение, которое интерпретируется как:  */

{
    useCapture: true // или false
}

/** Итак, useCapture — это фаза, на которой должен сработать обработчик.

 Что это значит? События могут срабатывать для любой части документа вследствие взаимодействия
 с ним пользователя или браузера. Они не просто начинаются и заканчиваются в одном месте;
 они циркулируют по всему документу, проходя свой собственный жизненный цикл. */